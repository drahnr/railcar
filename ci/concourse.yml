resource_types:
- name: pull-request
  type: docker-image
  source:
    repository: jtarchie/pr

resources:
- name: git-clone-resource
  type: git
  source:
    branch: master
    uri: https://github.com/drahnr/railcar.git
    ignore_paths: [ ci/* ]

- name: git-clone-resource-ci-rust-glibc-env
  type: git
  source:
    branch: master
    uri: https://github.com/drahnr/railcar.git
    paths: [ ci/Dockerfile.rustglibc ]

- name: git-clone-resource-ci-rust-musl-env
  type: git
  source:
    branch: master
    uri: https://github.com/drahnr/railcar.git
    paths: [ ci/Dockerfile.rustmusl ]

- name: git-clone-resource-ci-cxx-env
  type: git
  source:
    branch: master
    uri: https://github.com/drahnr/railcar.git
    paths: [ ci/Dockerfile.cxxenv ]

# - name: github-release
#   type: github-release
#   source:
#     owner: drahnr
#     access_token: ((sirmergealot-github-token))
#     repository:  railcar

# - name: git-tag-resource
#   type: git
#   source:
#     tag_filter: "v[0-9]*"
#     branch: master
#     uri: https://github.com/drahnr/railcar.git

- name: git-pull-request-resource
  type: pull-request
  source:
    repo: drahnr/railcar
    access_token: ((sirmergealot-github-token))


# - name: bucket-libseccomp
#   type: s3
#   source:
#     endpoint: https://minio.spearow.io
#     bucket: railcar-libseccomp
#     regexp: libseccomp.a.(.*)
#     access_key_id: {{minio-access-key}}
#     secret_access_key: {{minio-secret-key}}


# - name: bucket-pr-libseccomp
#   type: s3
#   source:
#     endpoint: https://minio.spearow.io
#     bucket: railcar-pr-libseccomp
#     regexp: libseccomp.a.(.*)
#     access_key_id: {{minio-access-key}}
#     secret_access_key: {{minio-secret-key}}

- name: env-musl
  type: docker-image
  source:
    repository: quay.io/drahnr/rust-musl-builder
    username: ((quay-drahnr-username))
    password: ((quay-drahnr-password))
    max_concurrent_downloads: 2
    max_concurrent_uploads: 2


- name: env-glibc
  type: docker-image
  source:
    tag: latest
    repository: quay.io/drahnr/rust-glibc-builder
    username: ((quay-drahnr-username))
    password: ((quay-drahnr-password))
    max_concurrent_downloads: 2
    max_concurrent_uploads: 2

- name: alpine
  type: docker-image
  source:
    tag: edge
    repository: alpine
    max_concurrent_downloads: 2
    max_concurrent_uploads: 2

- name: fedora
  type: docker-image
  source:
    tag: latest
    repository: fedora
    max_concurrent_downloads: 2
    max_concurrent_uploads: 2

- name: container-cxx-env
  type: docker-image
  source:
    tag: latest
    repository: quay.io/drahnr/container-cxx-env
    username: ((quay-drahnr-username))
    password: ((quay-drahnr-password))
    max_concurrent_downloads: 2
    max_concurrent_uploads: 2


#- name: gh-release
#  type: github-release
#  source:
#    owner: drahnr
#    repository: railcar
#    access_token: ((drahnr-github-token))


groups:
- name: master
  jobs:
  - master-validate

- name: pull-request
  jobs:
  - pr-validate

- name: oci
  jobs:
  - create-rust-musl-env
  - create-rust-glibc-env
  - create-cxx-env

jobs:
  - name: create-rust-musl-env
    build_logs_to_retain: 5
    public: true
    serial: true
    plan:
    - get: git-clone-resource-ci
      resource: git-clone-resource-ci-rust-musl-env
      trigger: true

    - task: cpycat
      timeout: 30m
      image: fedora
      config:
        platform: linux
        inputs:
        - name: git-clone-resource-ci
        outputs:
        - name: copycat
        run:
          path: sh
          args:
          - -exc
          - |
            cp -rfv ci/Dockerfile.rustmusl ../copycat/Dockerfile
          dir: git-clone-resource-ci

    - put: env-musl
      params:
        build: copycat
        tag_as_latest: true

  - name: create-rust-glibc-env
    build_logs_to_retain: 5
    public: true
    serial: true
    plan:
    - get: git-clone-resource-ci
      resource: git-clone-resource-ci-rust-glibc-env
      trigger: true

    - get: fedora
      params: { save: true }

    - task: cpycat
      timeout: 30m
      image: fedora
      config:
        platform: linux
        inputs:
        - name: git-clone-resource-ci
        outputs:
        - name: copycat
        run:
          path: sh
          args:
          - -exc
          - |
            cp -rfv ci/Dockerfile.rustglibc ../copycat/Dockerfile
          dir: git-clone-resource-ci

    - put: env-glibc
      params:
        load_base: fedora
        build: copycat
        tag_as_latest: true

  - name: create-cxx-env
    build_logs_to_retain: 5
    public: true
    serial: true
    plan:
    - get: git-clone-resource-ci
      resource: git-clone-resource-ci-cxx-env
      trigger: true

    - get: alpine
      params: { save: true }

    - task: cpycat
      timeout: 30m
      image: alpine
      config:
        platform: linux
        inputs:
        - name: git-clone-resource-ci
        outputs:
        - name: copycat
        run:
          path: sh
          args:
          - -exc
          - |
            cp -rfv ci/Dockerfile.cxxenv ../copycat/Dockerfile
          dir: git-clone-resource-ci

    - put: container-cxx-env
      params:
        load_base: alpine
        build: copycat
        tag_as_latest: true

  - name: pr-validate
    build_logs_to_retain: 10
    public: true
    serial: true
    plan:
    - get: env-glibc
    - get: env-musl
    - get: container-cxx-env

    - get: git-repo
      resource: git-pull-request-resource
      trigger: true


    - task: build-libseccomp
      timeout: 30m
      image: container-cxx-env
      config:
        platform: linux
        inputs:
        - name: git-repo
        outputs:
        - name: libseccomp
        run:
          path: sh
          args:
          - -exc
          - |
            git submodule update --init
            cd libseccomp
            autoreconf -i
            CC="gcc -pie -fPIC" ./configure --enable-static
            automake --add-missing
            make -j$(nproc)
            cp ./src/.libs/libseccomp.a ../../bucket-libseccomp/libseccomp.a.2.4.1
            cp ./libseccomp.pc ../../bucket-libseccomp/

          dir: git-repo

    - in_parallel:
### glibc
      - task: pr-validate-glibc-nightly
        timeout: 15m
        image: env-glibc
        config:
          platform: linux
          inputs:
          - name: git-repo
          - name: libseccomp
          run:
            user: sirmergealot
            path: sh
            args:
            - -exc
            - |
              export CARGO_HOME="$(pwd)/../cargo"
              sudo chown -Rf sirmergealot "${CARGO_HOME}"
              sudo chown -Rf sirmergealot "$(pwd)"
              rustc --version --verbose
              cargo +nightly b --features=nightly
              cargo +nightly t --features=nightly
            dir: git-repo
          caches:
          - path: cargo

      - task: pr-validate-glibc-beta
        timeout: 15m
        image: env-glibc
        config:
          platform: linux
          inputs:
          - name: git-repo
          - name: libseccomp
          run:
            user: sirmergealot
            path: sh
            args:
            - -exc
            - |
              export CARGO_HOME="$(pwd)/../cargo"
              sudo chown -Rf sirmergealot "${CARGO_HOME}"
              sudo chown -Rf sirmergealot "$(pwd)"
              rustc --version --verbose
              cargo +beta b
              cargo +beta t
            dir: git-repo
          caches:
          - path: cargo

      - task: pr-validate-glibc-stable
        timeout: 15m
        image: env-glibc
        config:
          platform: linux
          inputs:
          - name: git-repo
          - name: libseccomp
          run:
            user: sirmergealot
            path: sh
            args:
            - -exc
            - |
              export CARGO_HOME="$(pwd)/../cargo"
              sudo chown -Rf sirmergealot "${CARGO_HOME}"
              sudo chown -Rf sirmergealot "$(pwd)"
              rustc --version --verbose
              cargo +stable b
              cargo +stable t
            dir: git-repo
          caches:
          - path: cargo
### musl

      - task: pr-validate-musl-nightly
        timeout: 15m
        image: env-musl
        config:
          platform: linux
          inputs:
          - name: git-repo
          - name: libseccomp
          run:
            user: root
            path: sh
            args:
            - -exc
            - |
              export CARGO_HOME="$(pwd)/../cargo"
              rustc --version --verbose
              cargo +nightly b --features=nightly --target x86_64-unknown-linux-musl
              cargo +nightly t --features=nightly --target x86_64-unknown-linux-musl
            dir: git-repo
          caches:
          - path: cargo

      - task: pr-validate-musl-beta
        timeout: 15m
        image: env-musl
        config:
          platform: linux
          inputs:
          - name: git-repo
          - name: libseccomp
          run:
            user: root
            path: sh
            args:
            - -exc
            - |
              export CARGO_HOME="$(pwd)/../cargo"
              rustc --version --verbose
              cargo +beta b --target x86_64-unknown-linux-musl
              cargo +beta t --target x86_64-unknown-linux-musl
            dir: git-repo
          caches:
          - path: cargo


      - task: pr-validate-musl-stable
        timeout: 15m
        image: env-musl
        config:
          platform: linux
          inputs:
          - name: git-repo
          - name: libseccomp
          run:
            user: root
            path: sh
            args:
            - -exc
            - |
              export CARGO_HOME="$(pwd)/../cargo"
              rustc --version --verbose
              cargo +stable b --target x86_64-unknown-linux-musl
              cargo +stable t --target x86_64-unknown-linux-musl
            dir: git-repo
          caches:
          - path: cargo

        on_success:
          put: git-pull-request-resource
          params:
            path: git-repo
            context: compile
            status: success

        on_failure:
          put: git-pull-request-resource
          params:
            path: git-repo
            context: compile
            status: failure

      - task: format-check
        timeout: 15m
        image: env-glibc
        config:
          platform: linux
          inputs:
          - name: git-repo
          run:
            user: sirmergealot
            path: sh
            args:
            - -exc
            - |
              export CARGO_HOME="$(pwd)/../cargo"
              sudo chown -Rf sirmergealot "${CARGO_HOME}"
              sudo chown -Rf sirmergealot "$(pwd)"
              rustc --version --verbose
              rustup component add rustfmt-preview
              cargo fmt -- --check
            dir: git-repo
          caches:
          - path: cargo

        on_success:
          put: git-pull-request-resource
          params:
            path: git-repo
            context: format-check
            status: success

        on_failure:
          put: git-pull-request-resource
          params:
            path: git-repo
            context: format-check
            status: failure

  - name: master-validate
    build_logs_to_retain: 10
    public: true
    serial: true
    plan:
    - get: env-glibc
    - get: env-musl
    - get: container-cxx-env

    - get: git-repo
      resource: git-clone-resource
      trigger: true

    - task: build-libseccomp
      timeout: 30m
      image: container-cxx-env
      config:
        platform: linux
        inputs:
        - name: git-repo
        outputs:
        - name: libseccomp
        run:
          path: sh
          args:
          - -exc
          - |
            git submodule update --init
            cd libseccomp
            autoreconf -i
            CC="gcc -pie -fPIC" ./configure --enable-static
            automake --add-missing
            make -j$(nproc)
            cp ./src/.libs/libseccomp.a ../../libseccomp/libseccomp.a
            cp ./libseccomp.pc ../../libseccomp/

          dir: git-repo

    - in_parallel:
### glibc
      - task: validate-glibc-stable
        timeout: 15m
        image: env-glibc
        config:
          platform: linux
          inputs:
          - name: libseccomp
          - name: git-repo
          run:
            user: sirmergealot
            path: sh
            args:
            - -exc
            - |
              export CARGO_HOME="$(pwd)/../cargo"
              sudo chown -Rf sirmergealot "${CARGO_HOME}"
              sudo chown -Rf sirmergealot "$(pwd)"
              rustc --version --verbose
              cargo +stable b
              cargo +stable t
            dir: git-repo
          caches:
          - path: cargo

      - task: validate-glibc-beta
        timeout: 15m
        image: env-glibc
        config:
          platform: linux
          inputs:
          - name: libseccomp
          - name: git-repo
          run:
            user: sirmergealot
            path: sh
            args:
            - -exc
            - |
              export CARGO_HOME="$(pwd)/../cargo"
              sudo chown -Rf sirmergealot "${CARGO_HOME}"
              sudo chown -Rf sirmergealot "$(pwd)"
              rustc --version --verbose
              cargo +beta b
              cargo +beta t
            dir: git-repo
          caches:
          - path: cargo

      - task: validate-glibc-nightly
        timeout: 15m
        image: env-glibc
        config:
          platform: linux
          inputs:
          - name: git-repo
          - name: libseccomp
          run:
            user: sirmergealot
            path: sh
            args:
            - -exc
            - |
              export CARGO_HOME="$(pwd)/../cargo"
              sudo chown -Rf sirmergealot "${CARGO_HOME}"
              sudo chown -Rf sirmergealot "$(pwd)"
              rustc --version --verbose
              cargo +nightly b --features=nightly
              cargo +nightly t --features=nightly
            dir: git-repo
          caches:
          - path: cargo

### musl
      - task: validate-musl-stable
        timeout: 15m
        image: env-musl
        config:
          platform: linux
          inputs:
          - name: git-repo
          - name: libseccomp
          run:
            user: root
            path: sh
            args:
            - -exc
            - |
              export CARGO_HOME="$(pwd)/../cargo"
              rustc --version --verbose
              cargo +stable b --target x86_64-unknown-linux-musl
              cargo +stable t --target x86_64-unknown-linux-musl
            dir: git-repo
          caches:
          - path: cargo

      - task: validate-musl-beta
        timeout: 15m
        image: env-musl
        config:
          platform: linux
          inputs:
          - name: git-repo
          - name: libseccomp
          run:
            user: root
            path: sh
            args:
            - -exc
            - |
              export CARGO_HOME="$(pwd)/../cargo"
              rustc --version --verbose
              cargo +beta b --target x86_64-unknown-linux-musl
              cargo +beta t --target x86_64-unknown-linux-musl
            dir: git-repo
          caches:
          - path: cargo

      - task: validate-musl-nightly
        timeout: 15m
        image: env-musl
        config:
          platform: linux
          inputs:
          - name: git-repo
          - name: libseccomp
          run:          
            user: root
            path: sh
            args:
            - -exc
            - |
              export CARGO_HOME="$(pwd)/../cargo"
              rustc --version --verbose
              cargo +nightly b --features=nightly --target x86_64-unknown-linux-musl
              cargo +nightly t --features=nightly --target x86_64-unknown-linux-musl
            dir: git-repo
          caches:
          - path: cargo


  # - name: publish-github-release
  #   build_logs_to_retain: 5
  #   public: false
  #   serial: true
  #   plan:
  #   - get: env-glibc
  #   - get: git-repo
  #     resource: git-tag-resource
  #     trigger: true

  #   - task: create-github-release
  #     timeout: 15m
  #     image: env-glibc
  #     config:
  #       platform: linux
  #       inputs:
  #       - name: git-repo
  #       outputs:
  #       - name: release-info
  #       caches:
  #       - path: cargo
  #       run:
  #         path: sh
  #         args:
  #           - -exc
  #           - |
  #             export CARGO_HOME="$(pwd)/cargo"

  #             mkdir -p "../release-info"
  #             export RI_BASE_DIR="../release-info"
  #             export RI_ARTIFACTS_DIR="${RI_BASE_DIR}/artifacts"
  #             mkdir -p "${RI_ARTIFACTS_DIR}"
  #             export RI_TAG_FILE="${RI_BASE_DIR}/TAG"
  #             export RI_COMMITISH_FILE="${RI_BASE_DIR}/COMMITISH"
  #             export RI_NAME_FILE="${RI_BASE_DIR}/NAME"

  #             git rev-parse HEAD > "${RI_COMMITISH_FILE}"
  #             #git log -n 1 --format="%h" HEAD > "../${RI_COMMITISH_FILE}"
  #             cat "${RI_COMMITISH_FILE}"

  #             # the v-prefixed version
  #             cat ./.git/ref > "${RI_TAG_FILE}"
  #             cat "${RI_TAG_FILE}"

  #             # construct scalpel-v1.2.3
  #             echo "scalpel-$(cat ./.git/ref)" > "${RI_NAME_FILE}"
  #             cat "${RI_NAME_FILE}"

  #             # TODO cross compile to windows
  #             # $ cargo build --release --target x86_64-pc-windows-gnu
  #             # using the fedora provided precompiled static libs
  #             # and publish target/x86_64-pc-windows-gnu/release/scalpel.exe
  #             # TODO build for more OSes, such as fuchsia and BSD platforms
  #             mkdir -pv "${RI_ARTIFACTS_DIR}"
  #             for TARGET in x86_64-unknown-linux-gnu ; do
  #               echo "Prepping ${TARGET} ..."
  #               cargo build --release --target "${TARGET}" && \
  #               cp -vf "target/${TARGET}/release/scalpel" "${RI_ARTIFACTS_DIR}/scalpel-${TARGET}"
  #               echo "Prepped ${TARGET} ."
  #               echo ""
  #             done
  #         dir: git-repo

  #   - put: github-release
  #     params:
  #       name: release-info/NAME
  #       tag: release-info/TAG
  #       commitish: release-info/COMMITISH
  #       globs:
  #       - release-info/artifacts/*
